from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from db import Database
from pyqiwip2p import QiwiP2P
import random

db = Database("database.db")
p2p = QiwiP2P(auth_key = "eyJ2ZXJzaW9uIjoiUDJQIiwiZGF0YSI6eyJwYXlpbl9tZXJjaGFudF9zaXRlX3VpZCI6ImVvcTBsei0wMCIsInVzZXJfaWQiOiI3OTM3Njk5OTA2NiIsInNlY3JldCI6IjQ5MWU5ZWRiZTY1NDNhNDg3ODkzYmU4YTMxMTY4OWQyZWRkZjQ5MGExZmI4MWFjOWUxZjdiNzU1MzhhMDgwOGYifX0=")
bot = Bot(token = '5921463586:AAHvcgjK2Ni7S3OOioUr8ZWkpzAZEtnd3G4')
dp = Dispatcher(bot, storage = MemoryStorage())

product1_price = "179"
product2_price = "899"
product3_price = "349"
product4_price = "199"
product5_price = "149"

class FSMcheckproduct(StatesGroup):
    product_price = State()
    promo = State()
    help = State()
    qiw = State()
class UserState(StatesGroup):
    id = State()
    otvet = State() 
@dp.message_handler(commands = ['start'])
async def send_welcome(message: types.Message):
    if message.chat.type == 'private':
        reply_markup = ReplyKeyboardMarkup(resize_keyboard = True, row_width = 2)
        mbtn1 = KeyboardButton("üì≤–¢–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫–∞")
        mbtn2 = KeyboardButton("üë®‚Äçüíª–ü—Ä–æ—Ñ–∏–ª—å")
        mbtn4 = KeyboardButton("üõí–ö–∞—Ç–∞–ª–æ–≥")
        mbtn5—Ç= KeyboardButton("üí∞–ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å")
        
        reply_markup.add(mbtn1, mbtn2,  mbtn4, mbtn5)
        if not db.user_exists(message.from_user.id):
            db.add_user(message.from_user.id)
        await bot.send_message(message.from_user.id, f"<b>–ü—Ä–∏–≤–µ—Ç! {message.from_user.first_name}.–¢—ã –ø–æ–ø–∞–ª –≤ —Å–µ—Ä–≤–∏—Å –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é —Ç–µ–ª–µ–≥—Ä–∞–º–º –±–æ—Ç–æ–≤ –æ—Ç @belzgy\n –¢—É—Ç —Ç—ã —Å–º–æ–∂–µ—à—å –∑–∞–∫–∞–∑–∞—Ç—å –±–æ—Ç–∞ –ø–æ –Ω–∏–∑–∫–∏–º —Ü–µ–Ω–∞–º, –∏–ª–∏ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Ç–µ–º–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ –Ω–µ–π –º–æ–∂–µ—à—å –ø–æ—á–∏—Ç–∞—Ç—å –≤–æ –≤–∫–ª–∞–¥–∫–µ –ó–ê–†–ê–ë–û–¢–û–ö</b>", reply_markup = reply_markup, parse_mode='HTML')
        
@dp.message_handler(content_types = ['text','photo'])
async def main_markup(message: types.Message):
    inline_markup1 = InlineKeyboardMarkup()
    inline_markup2 = InlineKeyboardMarkup(row_width = 1)
    inline_markup3 = InlineKeyboardMarkup(row_width = 1)
    inline_markup4 = InlineKeyboardMarkup(row_width = 1)
    ibtn1 = InlineKeyboardButton("üì§–ü–æ–ø–æ–ª–Ω–∏—Ç—å", callback_data = "top_up")
    ibtn3 = InlineKeyboardButton("‚úÖ–ö—É–ø–∏—Ç—å", callback_data = "balance_profile")
    ibtn2 = InlineKeyboardButton("‚ö†Ô∏è–í—ã–≤–µ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞", callback_data = "promo")
    ibtn4 = InlineKeyboardButton("üõ†–ó–∞ –ø–æ–º–æ—â—å—é", callback_data = "help")
    ibtn5 = InlineKeyboardButton("üõ†–û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –ø–æ–º–æ—â—å", callback_data = "qi")
    ibtn6 = InlineKeyboardButton("–£—Å–ø–µ—à–Ω—ã–π –≤—ã–≤–æ–¥", callback_data = "pr")
    
    inline_markup1.add(ibtn1, ibtn2)
    inline_markup2.add(ibtn3)
    inline_markup3.add(ibtn4)
    inline_markup4.add(ibtn5)
    inline_markup5.add(ibtn6)
    if message.text == "üì≤–¢–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫–∞":
        await bot.send_photo(message.from_user.id, photo = 'https://i.imgur.com/LrKgiqE.jpeg', caption= "–¢–µ—Ö.–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –Ω–∞–ø–∏—à–µ—Ç –≤–∞–º –ø–æ—Å–ª–µ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è –≤–∞—à–µ–π –∑–∞—è–≤–∫–∏ –æ–±—ã—á–Ω–æ –≤ —Ç–µ—á–µ–Ω–∏–∏ 14 –º–∏–Ω—É—Ç\n–ß—Ç–æ–±—ã –æ–±—Ä–∞—Ç–∏—Ç—Å—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É", reply_markup = inline_markup3 )

    @dp.callback_query_handler(text="help")
    async def qiwi_product2(callback: types.CallbackQuery):
      await FSMcheckproduct.help.set()
      await bot.send_message(callback.from_user.id, "–û–ø–∏—à–∏ —Å–≤–æ—é –ø—Ä–æ–±–ª–µ–º—É:")

    @dp.message_handler(content_types=['text'], state=FSMcheckproduct.help)
    async def get_address(message: types.Message, state: FSMContext):
    
      await state.update_data(help=message.text)
      data = await state.get_data()
      await bot.send_message(1742466144,
                         f"@{message.from_user.username} –£ –¥–∞–Ω–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ –ø—Ä–æ–±–ª–µ–º–∞‚ö†Ô∏è\n"
                         f"{message.from_user.id} id - —Ç–æ–≥–æ —á–µ–ª–∞ —É –∫–æ—Ç–æ—Ä–æ–≥–æ –ø—Ä–æ–±–ª–µ–º–∞\n"    
                         f"–û–ø–∏—Å–∞–Ω–∏–µ: {data['help']}", reply_markup = inline_markup4)
    
      await state.finish()
    
    @dp.callback_query_handler(text="qi")
    async def user_register(message: types.Message):
       await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ:")
       await UserState.id.set()

  
    @dp.message_handler(state=UserState.id)
    async def get_username(message: types.Message, state: FSMContext):
        await state.update_data(id=message.text)
        await message.answer("–¢–µ–ø–µ—Ä—å –æ—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:")
        await UserState.next() # –ª–∏–±–æ –∂–µ UserState.adress.set()


    @dp.message_handler(state=UserState.otvet)
    async def get_address(message: types.Message, state: FSMContext):
      await state.update_data(otvet=message.text)
      data = await state.get_data()
      await bot.send_message(data['id'],
                         f"–í—ã–≤–æ–¥ —É—Å–ø–µ—à–Ω–æ —Å–æ–≤–µ—Ä—à–µ–Ω!: {data['otvet']}")

      await state.finish()



    if message.text == "üë®‚Äçüíª–ü—Ä–æ—Ñ–∏–ª—å":
        await bot.send_photo(message.from_user.id, photo = 'https://i.imgur.com/6miDm2z.jpeg',
        caption=f"üë®‚Äçüíª–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: @{message.from_user.username}\n"
                f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
                f"üîçID:{message.from_user.id}\n"
                f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
                f"  ‚îîüí∞–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤: {db.user_money(message.from_user.id)} —Ä—É–±.", reply_markup = inline_markup1, parse_mode='HTML')



  

    if message.text == "üí∞–ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å":
        await bot.send_photo(message.from_user.id, photo = 'https://i.imgur.com/6miDm2z.jpeg',
        caption="–°—É–ø–µ—Ä, —è —Ä–∞–¥, —á—Ç–æ —É —Ç–µ–±—è –µ—Å—Ç—å —Ä–≤–µ–Ω–∏–µ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å, –∏ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–∞—á–∞—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ —Å –Ω–∞—à–∏–º —Å–µ—Ä–≤–∏—Å–æ–º\n–û–±—å—è—Å–Ω—é, —Ç–≤–æ–π –∑–∞—Ä–∞–±–æ—Ç–æ–∫ –±—É–¥–µ—Ç –æ—Å–Ω–æ–≤–∞—Ç—å—Å—è –Ω–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ, —Ç–æ –µ—Å—Ç—å —Ä–∞—Å—Å—ã–ª–∞—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –Ω–∞—à —Å–µ—Ä–≤–∏—Å\n–° –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –æ—Ñ–æ—Ä–º–∏—Ç –∑–∞–∫–∞–∑ –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –æ—Ç 149 —Ä—É–±!\n‚ùóÔ∏è–í–Ω–∏–º–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ —Å —Ç–µ—Ö, –∫—Ç–æ –æ—Ñ–æ–º–∏–ª –∏ –æ–ø–ª–∞—Ç–∏–ª –ø—Ä–µ–¥–æ–ø–ª–∞—Ç—É ", parse_mode='HTML')

    @dp.callback_query_handler(text="promo")
    async def qiwi_product2(callback: types.CallbackQuery):
      await FSMcheckproduct.qiw.set()
      await bot.send_message(callback.from_user.id, "–í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è –Ω–∞ –∫–∏–≤–∏ –∫–æ—à–µ–ª–µ–∫\n–î–ª—è –Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–æ—à–µ–ª—å–∫–∞ –¥–ª—è  –≤—ã–≤–æ–¥–∞:")

    @dp.message_handler(state=UserState.qiw)
    async def get_username(message: types.Message, state: FSMContext):
      await state.update_data(qiw=message.text)
      await message.answer("–û—Ç–ª–∏—á–Ω–æ —Ç–µ–ø–µ—Ä—å —Å—É–º–º—É –≤—ã–≤–æ–¥–∞")
      await UserState.next()

  
    @dp.message_handler(content_types=['text'], state=FSMcheckproduct.promo)
    async def check_product_price2(message: types.Message, state: FSMContext):
      async with state.proxy() as data:

        
        data['promo'] = int(message.text)
        user_money = db.user_money(message.from_user.id)
        
        if (user_money - int(message.text)) >= 1:
           db.set_money(message.from_user.id, user_money - int(message.text))
           await bot.send_message(message.from_user.id, "–û—Ç–ª–∏—á–Ω–æ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è, –æ–±—ã—á–Ω–æ —ç—Ç–æ –∑–∞–Ω–∏–º–∞–µ—Ç –æ–∫–æ–ª–æ 30 –º–∏–Ω—É—Ç")
           await bot.send_message(1742466144,
                         f"@{message.from_user.username} - –∏–º—è —á–µ–ª–æ–≤–µ–∫–∞, –≤—ã–≤–æ–¥\n"
                         f"–ù–æ–º–µ—Ä: {data['qiw']}\n"
                         f"–°—É–º–º–∞: {data['promo']}")
        if (user_money - int(message.text)) <= 1:
           await bot.send_message(message.from_user.id, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ!")
           await state.finish()


      

      


    if message.text == "üõí–ö–∞—Ç–∞–ª–æ–≥":
        number_inline_cat = InlineKeyboardMarkup(row_width =2)
        cat1 = InlineKeyboardButton("üëæ–°–∫—Ä–∏–ø—Ç—ã", callback_data = "cat1")
        number_inline_cat.add(cat1)
        await bot.send_message(message.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥—Ä–∏—é: ", reply_markup = number_inline_cat)






    
   

    @dp.callback_query_handler(text = "number8")
    async def top_up(callback: types.CallbackQuery):
        await bot.send_message(callback.from_user.id, "–¢–æ–≤–∞—Ä –Ω–æ–º–µ—Ä: 3.\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: ", reply_markup = inline_markup2)
        @dp.callback_query_handler(text = "balance_profile")
        async def top_down(callback: types.CallbackQuery):

            user_money = db.user_money(callback.from_user.id)
            money = int(product3_price)
    
            if (user_money - money) >= 0:
                db.set_money(callback.from_user.id, user_money + money)
                await bot.send_message(message.from_user.id, "–ü–æ–∫—É–ø–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–∞!")
            else:
                await bot.send_message(message.from_user.id, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ!")
        @dp.callback_query_handler(text = "qiwi")
        async def qiwi_product3(callback: types.CallbackQuery):
            await FSMcheckproduct.product_price.set()
            await bot.send_message(message.from_user.id, "–í–ø–∏—à–∏—Ç–µ —á–∏—Å–ª–æ " + product3_price)
        @dp.message_handler(content_types = ['text'], state = FSMcheckproduct.product_price)
        async def check_product_price3(message: types.Message, state: FSMContext):
            async with state.proxy() as data:
                data['product_price'] = message.text
                if message.text == product3_price:
                    await bot.send_message(message.from_user.id, "–£—Å–ø–µ—à–Ω–æ!")
                if message.text != product3_price:
                    await bot.send_message(message.from_user.id, "–û—à–∏–±–∫–∞ –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –µ—â–µ —Ä–∞–∑")
                    return 
                if message.chat.type == "private":
                    def is_number(_str):
                        try:
                            int(_str)
                            return True
                        except ValueError:
                            return False
                    if is_number(message.text):
                        message_money = int(message.text)
                        if message_money >= 5:
                            comment = str(message.from_user.id) + "_" + str(random.randint(1000, 9999))
                            bill = p2p.bill(amount = message_money, lifetime = 15, comment = comment)

                            db.add_check(message.from_user.id, message_money, bill.bill_id)

                            await bot.send_message(message.chat.id, f"–í–∞–º –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å {message_money} —Ä—É–±. –Ω–∞ –Ω–∞—à —Å—á–µ—Ç QIWI\n–°—Å—ã–ª–∫–∞: {bill.pay_url}\n–£–∫–∞–∑–∞–≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –æ–ø–ª–∞—Ç–µ: {comment}", reply_markup = buy_menu(url = bill.pay_url, bill = bill.bill_id))
                        else:
                            await bot.send_message(message.chat.id,"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞ 5 —Ä—É–±")
            await state.finish()

    if message.chat.type == "private":
        def is_number(_str):
            try:
                int(_str)
                return True
            except ValueError:
                return False
        if is_number(message.text):
            message_money = int(message.text)
            if message_money >= 5:
                comment = str(message.from_user.id) + "_" + str(random.randint(1000, 9999))
                bill = p2p.bill(amount = message_money, lifetime = 15, comment = comment)

                db.add_check(message.from_user.id, message_money, bill.bill_id)

                await bot.send_message(message.from_user.id, f"–í–∞–º –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å {message_money} —Ä—É–±. –Ω–∞ –Ω–∞—à —Å—á–µ—Ç QIWI\n–°—Å—ã–ª–∫–∞: {bill.pay_url}\n–£–∫–∞–∑–∞–≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –æ–ø–ª–∞—Ç–µ: {comment}", reply_markup = buy_menu(url = bill.pay_url, bill = bill.bill_id))
            else:
                await bot.send_message(message.from_user.id,"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞ 5 —Ä—É–±")

def buy_menu(isURL = True, url = "", bill = ""):
        qiwiMenu = InlineKeyboardMarkup(row_width = 1)
        if isURL:
            btnUrlQIWI = InlineKeyboardButton(text = "–°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É", url = url)
            qiwiMenu.insert(btnUrlQIWI)
        btnCheckQIWI = InlineKeyboardButton(text = "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data = "check_" + bill)
        qiwiMenu.insert(btnCheckQIWI)
        return qiwiMenu


@dp.callback_query_handler(text = "top_up")
async def top_up(callback: types.CallbackQuery):
    await bot.send_message(callback.from_user.id, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è!")

@dp.callback_query_handler(text_contains = "check_")
async def top_up(callback: types.CallbackQuery):
    bill = str(callback.data[1:])
    info = db.get_check(bill)
    if info != False:
        if str(p2p.check(bill_id = bill).status) == "PAID":
            user_money = db.user_money(callback.from_user.id)
            money = int(info[2])
            db.set_money(callback.from_user.id, user_money + money)
            await bot.send_message(callback.chat.id,"–í–∞—à —Å—á–µ—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω!")
        else:
            await bot.send_message(callback.from_user.id,"–í—ã –Ω–µ –æ–ø–ª–∞—Ç–∏–ª–∏ —Å—á–µ—Ç", reply_markup = buy_menu(False, bill = bill))
    else:
        await bot.send_message(callback.from_user.id,"–°—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates = True)
        
